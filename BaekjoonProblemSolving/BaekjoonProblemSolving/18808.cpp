/*
https://www.acmicpc.net/problem/18808

&Title
18808번 - 스티커 붙이기

&Question
혜윤이는 최근에 다양한 대회를 참여하면서 노트북에 붙일 수 
있는 스티커들을 많이 받았다. 스티커는 아래와 같이 사각 모눈종이 
위에 인쇄되어 있으며, 스티커의 각 칸은 상하좌우로 모두 연결되어 
있다. 또한 모눈종이의 크기는 스티커의 크기에 꼭 맞아서, 상하좌우에 
스티커가 포함되지 않는 불필요한 행이나 열이 존재하지 않는다.아래는 올바른 
모눈종이의 예시이다. 주황색 칸은 스티커가 붙은 칸을, 하얀색 칸은 
스티커가 붙지 않은 칸을 나타낸다.반면 아래는 올바르지 않은 모눈종이의 
예시이다. 첫 번째는 윗쪽에 불필요한 행이 있고, 두 번째는 
왼쪽에 불필요한 열이 있다. 그리고 세 번째는 스티커의 각 
칸이 상하좌우로 모두 연결되어 있지 않다.혜윤이는 자신의 노트북에 이 
스티커들을 붙이기로 했다. 혜윤이의 노트북은 마침 직사각형 모양이고, 스티커가 
인쇄된 모눈종이와 같은 간격으로 격자가 그려져 있다. 혜윤이는 스티커들을 
먼저 받았던 것부터 차례대로 격자에 맞춰서 붙이려고 한다.혜윤이가 스티커를 
붙이는 방법은 다음과 같다.스티커를 회전시키지 않고 모눈종이에서 떼어낸다.다른 스티커와 
겹치거나 노트북을 벗어나지 않으면서 스티커를 붙일 수 있는 위치를 
찾는다. 혜윤이는 노트북의 위쪽부터 스티커를 채워 나가려고 해서, 스티커를 
붙일 수 있는 위치가 여러 곳 있다면 가장 위쪽의 
위치를 선택한다. 가장 위쪽에 해당하는 위치도 여러 곳이 있다면 
그중에서 가장 왼쪽의 위치를 선택한다.선택한 위치에 스티커를 붙인다. 만약 
스티커를 붙일 수 있는 위치가 전혀 없어서 스티커를 붙이지 
못했다면, 스티커를 시계 방향으로 90도 회전한 뒤 2번 과정을 
반복한다.위의 과정을 네 번 반복해서 스티커를 0도, 90도, 180도, 
270도 회전시켜 봤음에도 스티커를 붙이지 못했다면 해당 스티커를 붙이지 
않고 버린다.아래의 예시를 통해 스티커를 붙이는 과정을 이해해보자. 노트북은 
세로 5칸, 가로 4칸 크기이고, 혜윤이가 가지고 있는 스티커들은 
아래와 같다. 왼쪽에서 오른쪽 순으로 스티커를 붙일 것이다.첫 번째 
스티커는 회전 없이 온전히 붙일 수 있는 공간이 아래와 
같이 6곳이 있다.이 중에서 가장 위쪽의 위치, 가능한 가장 
위쪽의 위치가 여러 개이면 그 중에서 가장 왼쪽의 위치는 
첫 번째이다. 스티커를 붙인 후 노트북의 모양은 아래와 같다.두 
번째 스티커는 회전 없이 온전히 붙일 수 있는 공간이 
없다. 그러나 시계 방향으로 90도 회전한 후에는 붙일 수 
있는 공간이 1개 생긴다. 해당 공간에 스티커를 붙인 후 
노트북의 모양은 아래와 같다.세 번째 스티커는 스티커를 시계방향으로 0, 
90, 180, 270도 회전시킨 모양에 대해 전부 확인을 해도 
스티커를 붙일 수 있는 공간이 없다. 그러므로 해당 스티커를 
붙이지 않고 버린다.네 번째 스티커는 스티커를 시계방향으로 0, 90, 
180도 회전 시킨 모양에 대해 온전히 붙일 수 있는 
공간이 없다. 그러나 시계 방향으로 270도 회전한 후에는 공간이 
1개 생긴다. 스티커를 붙인 후 노트북의 모양은 아래와 같다. 
최종적으로 노트북의 18칸이 스티커로 채워졌다.혜윤이는 스티커를 다 붙인 후의 
노트북의 모습이 궁금해졌다. 노트북의 크기와 스티커들이 주어졌을 때 스티커들을 
차례대로 붙이고 난 후 노트북에서 몇 개의 칸이 채워졌는지 
구해보자. 

&Input
첫째 줄에 노트북의 세로와 가로 길이를 나타내는 N(1 
≤ N ≤ 40)과 M(1 ≤ M ≤ 40), 
그리고 스티커의 개수 K(1 ≤ K ≤ 100)이 한 
칸의 빈칸을 사이에 두고 주어진다.그 다음 줄부터는 K개의 스티커들에 
대한 정보가 주어진다. 각 스티커는 아래와 같은 형식으로 주어진다.먼저 
i번째 스티커가 인쇄된 모눈종이의 행의 개수와 열의 개수를 나타내는 
Ri(1 ≤ Ri ≤ 10)와 Ci(1 ≤ Ci ≤ 
10)가 한 칸의 빈칸을 사이에 두고 주어진다.다음 Ri개의 줄에는 
각 줄마다 모눈종이의 각 행을 나타내는 Ci개의 정수가 한 
개의 빈칸을 사이에 두고 주어진다. 각 칸에 들어가는 값은 
0, 1이다. 0은 스티커가 붙지 않은 칸을, 1은 스티커가 
붙은 칸을 의미한다.문제에서 설명한 것과 같이 스티커는 모두 올바른 
모눈종이에 인쇄되어 있다. 구체적으로 스티커의 각 칸은 상하좌우로 모두 
연결되어 있고, 모눈종이의 크기는 스티커의 크기에 꼭 맞아서 상하좌우에 
스티커에 전혀 포함되지 않는 불필요한 행이나 열이 존재하지 않는다. 


&Output
첫째 줄에 주어진 스티커들을 차례대로 붙였을 때 노트북에서 
스티커가 붙은 칸의 수를 출력한다. 

&Example
-input
5 4 4
3 3
1 0 1
1 1 1
1 0 1
2 5
1 1 1 1 1
0 0 0 1 0
2 3
1 1 1
1 0 1
3 3
1 0 0
1 1 1
1 0 0

-output
18

-input
1 3 3
2 3
1 0 0
1 1 1
1 1
1
3 1
1
1
1

-output
1

-input
2 3 3
2 3
1 1 1
1 0 0
2 1
1
1
2 2
1 0
1 1

-output
6

-input
4 5 4
3 3
1 0 1
1 1 1
0 1 0
2 4
1 1 1 1
0 1 0 1
1 4
1 1 1 1
4 2
1 0
1 1
0 1
0 1

-output
17

-input
2 2 3
3 1
1
1
1
2 3
1 0 1
1 1 1
2 4
1 0 1 1
1 1 1 0

-output
0

-input
6 7 5
4 6
1 0 0 1 0 1
1 1 0 1 0 1
1 1 1 1 1 1
0 0 0 1 0 0
4 3
0 1 0
1 1 1
0 1 1
1 1 0
3 6
1 1 1 1 1 1
0 0 1 0 0 0
0 0 1 0 0 0
6 6
0 0 1 1 0 0
1 1 1 1 0 1
0 0 1 1 1 1
0 0 1 1 1 1
1 1 1 0 1 1
0 1 0 0 1 0
4 4
1 1 1 1
0 0 0 1
0 0 1 1
0 0 0 1

-output
30

-input
6 8 3
4 5
0 0 1 1 1
1 1 1 0 1
0 0 1 0 1
0 0 1 0 0
5 4
0 0 1 0
1 1 1 1
1 1 0 1
1 1 0 0
1 1 0 0
5 6
0 0 1 1 1 1
1 1 1 1 0 0
1 1 1 1 1 0
0 1 0 1 0 0
0 1 0 1 0 0

-output
22

-input
8 6 6
3 5
0 1 0 0 0
1 1 1 1 1
0 1 0 0 1
6 3
0 0 1
0 0 1
0 0 1
1 1 1
1 0 1
1 1 1
6 3
1 1 0
1 0 0
1 1 1
1 0 1
1 0 0
1 0 0
6 6
0 0 0 0 1 0
0 0 1 0 1 0
0 0 1 0 1 0
0 1 1 1 1 0
0 1 1 0 1 1
1 1 1 0 0 0
4 5
0 0 0 0 1
1 0 0 1 1
1 1 1 1 0
1 1 0 1 0
4 3
1 1 0
1 0 0
1 1 1
1 1 1

-output
29


*/

/*
#include <iostream>
#include <vector>
using namespace std;

int n, m, k, map[40][40];
vector<vector<int>> sticker[100];

// 스티커를 붙임
void attach(int y, int x, int pos) {
	int row = sticker[pos].size();
	int col = sticker[pos][0].size();
	for(int i = 0; i < row; i++)
		for(int j = 0; j < col; ++j)
			if (sticker[pos][i][j]) {
				map[i + y][j + x] = 1;
			}
}

// 스티커를 회전함
void rotateSticker(int pos) {
	int row = sticker[pos][0].size();
	int col = sticker[pos].size();
	vector<vector<int>> v(row, vector<int>(col));
	for(int i = 0; i < row; ++i)
		for (int j = 0; j < col; ++j) {
			v[i][j] = sticker[pos][col - 1 - j][i];
		}
	sticker[pos] = v;
}

// 스티커를 붙일 수 있나 확인
bool checkPossible(int y, int x, int pos) {
	int row = sticker[pos].size();
	int col = sticker[pos][0].size();

	if (row + y > n || col + x > m)return false;
	for (int i = 0; i < row; ++i)
		for (int j = 0; j < col; ++j)
			if (sticker[pos][i][j] && map[i + y][j + x])
				return false;
	return true;
}

void choiceSticker(int cur) {
	if (cur == k)
		return;
	// map에서 붙일 수 있는 곳을 찾음
	for (int k = 0; k < 4; k++) {
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				if (checkPossible(i, j, cur)) {
					attach(i, j, cur);
					choiceSticker(cur + 1);
					return;
				}
		rotateSticker(cur);
	}
	// 4방향 다 돌려도 못붙일 경우 해당 스티커를 버림
	choiceSticker(cur + 1);
}

void init() {
	cin >> n >> m >> k;
	int row, col;
	for (int i = 0; i < k; ++i) {
		cin >> row >> col;
		sticker[i].resize(row);
		for (int j = 0; j < row; ++j)
			sticker[i][j].resize(col);

		for (int y = 0; y < row; ++y)
			for (int x = 0; x < col; ++x)
				cin >> sticker[i][y][x];
	}
}

int run() {
	init();
	choiceSticker(0);
	int res = 0;
	for (int i = 0; i < n; ++i)
		for (int j = 0; j < m; ++j)
			if (map[i][j])++res;
	return res;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout << run() << endl;
	return 0;
}
*/