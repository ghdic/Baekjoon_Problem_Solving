/*
https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AWwtYmX6hvsDFAWU&categoryId=AWwtYmX6hvsDFAWU&categoryType=CODE

8191. 만화책 정렬하기 D5
※ SW Expert 아카데미의 문제를 무단 복제하는 것을 금지합니다.


민영이는 만화책 대여점에서 아르바이트를 하고 있다.

민영이의 중요한 일 중 하나는 순서가 엉망인 책들을 순서대로 만드는 것이다.

오늘은 많은 손님들이 왔다 갔는데, 최근 인기가 많은 만화책 한 종류의 순서가 너무 심하게 엉망이 되었다.

이 만화책은 1편에서 N편까지 있는데, 지금 책장의 한 행에 모두 꽂혀 있다.

왼쪽에서 i번째에 있는 만화책은 Si편이다.

민영이는 이 만화책을 1편에서 N편까지의 순서대로 정렬해서 아래쪽 행에 다시 꽂고 싶다.

이를 위해 민영이는 책들을 왼쪽에서 오른쪽으로 순서대로 훑으면서,

1권이 나오면 아래쪽 행에 옮기고, 2권이 나오면 아래쪽 행에 옮기고, …를 원하는 책이 나올 때 마다 순서대로 반복할 것이다.

이렇게 책을 정렬하면, 왼쪽 끝에서 시작해서 오른쪽 끝으로 왔을 때 모든 책을 아래쪽 행에 꽂을 수 없을 수도 있다.

아직 모든 책이 아래쪽 행으로 옮겨지지 않았다면,

다시 왼쪽 끝으로 와서 오른쪽 끝으로 책들을 훑으면서 다음에 꽂을 책을 찾아 아래쪽 행으로 옮긴다.

예를 들어, 책이 (4, 3, 5, 1, 2, 6)의 순서대로 꽂혀 있다면,

처음 훑을 때 1권, 2권을, 두 번째 훑을 때 3권을, 세 번째 훑을 때 4권, 5권, 6권을 아래쪽 행에 꽂아 모든 책을 옮길 수 있다.

지금 책의 개수와 책들의 어떤 순서로 꽂혀 있는지 주어질 때,

책들을 총 몇 번 훑어야 하는지 구하는 프로그램을 작성하라.


[입력]

첫 번째 줄에 테스트 케이스의 수 T가 주어진다.

각 테스트 케이스의 첫 번째 줄에는 하나의 정수 N(1 ≤ N ≤ 200,000)이 주어진다.

두 번째 줄에는 N개의 정수 S1, S2, ... SN(1 ≤ Si ≤ N)이 공백 하나로 구분되어 주어진다.

Si는 왼쪽에서 i번째에 있는 만화책의 편수를 나타내며, 같은 편수인 만화책은 없다.


[출력]

각 테스트 케이스마다 ‘#x’(x는 테스트케이스 번호를 의미하며 1부터 시작한다)를 출력하고,

각 테스트 케이스마다 책을 왼쪽에서 오른쪽으로 몇 번 훑으면 정렬이 완료되는지 출력하라.

 
입력
2
3
3 2 1
6
4 3 5 1 2 6  // 테스트 케이스 개수
// 첫 번째 테스트 케이스, N = 3

// 두 번째 테스트 케이스, N = 6
  sample_input.txt
출력
#1 3
#2 3  // 첫 번째 테스트 케이스 결과
// 두 번째 테스트 케이스 결과
sample_output.txt
*/

// D5치고 쉬운듯?
/*
#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

int n;
int check[200002];
int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	int T;
	cin >> T;
	for (int t = 1; t < T + 1; ++t) {
		cin >> n;
		int m, result, start = 1;
		memset(check + 1, 0, sizeof(int) * n);
		for (int i = 0; i < n; ++i) {
			cin >> m;
			if (check[m - 1] == 0) {
				check[m] = start++;
			}
			else {
				check[m] = check[m - 1];
			}
		}

		cout << "#" << t << " " << start - 1 << "\n";
	}
	return 0;
}
*/